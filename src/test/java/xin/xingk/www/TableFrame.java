package xin.xingk.www;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.extras.FlatSVGUtils;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.Data;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.*;

/**
 * @Author: 陈靖杰
 * @Date: 2022/2/11 13:34
 * @Description:
 */
@Data
public class TableFrame {
    private JPanel mainPanel;
    private JButton addButton;
    private JButton updateButton;
    private JButton delButton;
    private JButton startButton;
    private JTable table1;
    private JTextArea logArea;
    JPopupMenu popupMenu2 = new JPopupMenu();
    JMenuItem menuItem3 = new JMenuItem();
    JMenuItem menuItem4 = new JMenuItem();
    JMenuItem menuItem5 = new JMenuItem();
    JMenuItem menuItem6 = new JMenuItem();

    private static final String[] COLUMNS = {"本地目录", "云盘备份目录", "备份模式", "目录检测", "自动备份时间", "状态", "备份数量", "操作"};

    public static void main(String[] args) {
        FlatDarkLaf.setup();

        JFrame frame = new JFrame("TableFrame");
        frame.setTitle("备份助手V1.3，欢迎您：xxx");
        frame.setIconImages(FlatSVGUtils.createWindowIconImages("/icons/logo.svg"));
        TopMenuBar topMenuBar = TopMenuBar.getInstance();
        topMenuBar.init();
        UIManager.put("TitlePane.unifiedBackground", false);
        frame.setJMenuBar(topMenuBar);
        ComponentUtil.setPreferSizeAndLocateToCenter(frame, 0.6, 0.8);
        TableModel model = new DefaultTableModel(parseInterfaces(), COLUMNS);
        TableFrame tableFrame = new TableFrame();
        JTable table1 = tableFrame.getTable1();
        tableFrame.getAddButton().addActionListener(e -> {
            table1.setShowVerticalLines(true);
            table1.setShowHorizontalLines(true);
        });
        table1.setModel(model);
        table1.setAutoCreateRowSorter(true);
        JPopupMenu popupMenu2 = tableFrame.getPopupMenu2();
        //---- menuItem3 ----
        tableFrame.getMenuItem3().setText("修改");
        popupMenu2.add(tableFrame.getMenuItem3());

        //---- menuItem4 ----
        tableFrame.getMenuItem4().setText("删除");
        popupMenu2.add(tableFrame.getMenuItem4());
        popupMenu2.addSeparator();

        //---- menuItem5 ----
        tableFrame.getMenuItem5().setText("开始备份");
        popupMenu2.add(tableFrame.getMenuItem5());

        table1.setComponentPopupMenu(tableFrame.popupMenu2);
        JTextArea logArea = tableFrame.getLogArea();
        String info = "温馨提示：云盘备份目录是要备份到阿里云盘那个目录下(不存在则自动创建)\n";
        info += "普通备份：会按本地目录结构上传文件\n";
        info += "分类备份：会将本地文件按文档、压缩包、软件、音乐、图片、视频等分类上传\n";
        info += "目录检测：开启目录检测后，会根据文件变更实时备份\n";
        info += "备份时间：输入备份时间后会根据指定时间定时备份\n";
        info += "设置开机启动教程：https://gitee.com/xingk-code/AliYunPan/wikis/pages\n";
        info += "如有问题可以联系作者微信：chen151363，QQ：850222153，反馈问题Q群：878678008\n";
        info += "运行日志...\n";
        logArea.setText(info);
//        logArea.setForeground(Color.white);
//        logArea.setBackground(Color.BLACK);
        logArea.setEditable(false);
        //启动自动换行
        logArea.setLineWrap(true);
        //换行不断字
        logArea.setWrapStyleWord(true);
        logArea.setVisible(true);
        frame.setContentPane(tableFrame.mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private static Object[][] parseInterfaces() {
        Object[][] dataArr = new Object[5][COLUMNS.length];
        for (int i = 0; i < dataArr.length; i++) {
            dataArr[i][0] = "D:\\用户目录\\文档\\WeChat Files\\wxid_3wc96wg6zgf022\\FileStorage\\File";
            dataArr[i][1] = "测试";
            dataArr[i][2] = "测试";
            dataArr[i][3] = "测试";
            dataArr[i][4] = "测试";
            dataArr[i][5] = "测试";
            dataArr[i][6] = "测试";
            dataArr[i][7] = "测试";
        }
        return dataArr;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 2, new Insets(20, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addButton = new JButton();
        addButton.setText("新增");
        panel1.add(addButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateButton = new JButton();
        updateButton.setText("修改");
        panel1.add(updateButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        delButton = new JButton();
        delButton.setText("删除");
        panel1.add(delButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("开始备份");
        panel1.add(startButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        scrollPane1.setViewportView(table1);
        final JScrollPane scrollPane2 = new JScrollPane();
        mainPanel.add(scrollPane2, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        logArea = new JTextArea();
        scrollPane2.setViewportView(logArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
